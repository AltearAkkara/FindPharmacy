package com.appsng.greendaoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHARMACY".
*/
public class PharmacyDao extends AbstractDao<Pharmacy, Long> {

    public static final String TABLENAME = "PHARMACY";

    /**
     * Properties of entity Pharmacy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pharmacy_id = new Property(1, int.class, "pharmacy_id", false, "PHARMACY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Lat = new Property(4, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(5, Double.class, "lng", false, "LNG");
        public final static Property Number = new Property(6, String.class, "number", false, "NUMBER");
        public final static Property Owner = new Property(7, String.class, "owner", false, "OWNER");
    }


    public PharmacyDao(DaoConfig config) {
        super(config);
    }
    
    public PharmacyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHARMACY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHARMACY_ID\" INTEGER NOT NULL ," + // 1: pharmacy_id
                "\"NAME\" TEXT," + // 2: name
                "\"ADDRESS\" TEXT," + // 3: address
                "\"LAT\" REAL," + // 4: lat
                "\"LNG\" REAL," + // 5: lng
                "\"NUMBER\" TEXT," + // 6: number
                "\"OWNER\" TEXT);"); // 7: owner
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHARMACY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pharmacy entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPharmacy_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(5, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(6, lng);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(8, owner);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pharmacy entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPharmacy_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(5, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(6, lng);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(8, owner);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pharmacy readEntity(Cursor cursor, int offset) {
        Pharmacy entity = new Pharmacy( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pharmacy_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lng
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // number
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // owner
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pharmacy entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPharmacy_id(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLng(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOwner(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pharmacy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pharmacy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pharmacy entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
